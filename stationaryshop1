import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
import mysql.connector

class StationeryShopApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Stationery Shop Inventory Management")
        self.root.geometry("900x600")
        self.root.configure(bg="#e0f7fa")  # Light cyan background for modern style

        # Connect to MySQL Database
        self.conn = mysql.connector.connect(
            host="localhost",
            user="root",  # Change this if your MySQL user is different
            password="root",   # Add your MySQL password
            database="statdb"  # Database name for Stationery Shop
        )
        self.cursor = self.conn.cursor()
        self.create_table()

        # UI Components
        self.setup_ui()
        self.view_inventory()

    def create_table(self):
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS stationery_inventory (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                price DECIMAL(10,2) NOT NULL,
                stock INT NOT NULL,
                point_level VARCHAR(255) NOT NULL,
                date_added DATE NOT NULL
            )
        """)
        self.conn.commit()

    def setup_ui(self):
        # Change fonts and button styles to modern
        label_font = ('Helvetica', 12, 'bold')
        entry_font = ('Arial', 12)
        
        self.name_label = tk.Label(self.root, text="Stationery Item Name:", font=label_font, bg="#e0f7fa")
        self.name_label.pack(pady=5)
        self.name_entry = tk.Entry(self.root, font=entry_font, bd=2, relief="solid")
        self.name_entry.pack(pady=5)

        self.price_label = tk.Label(self.root, text="Price ($):", font=label_font, bg="#e0f7fa")
        self.price_label.pack(pady=5)
        self.price_entry = tk.Entry(self.root, font=entry_font, bd=2, relief="solid")
        self.price_entry.pack(pady=5)

        self.stock_label = tk.Label(self.root, text="Stock Quantity:", font=label_font, bg="#e0f7fa")
        self.stock_label.pack(pady=5)
        self.stock_entry = tk.Entry(self.root, font=entry_font, bd=2, relief="solid")
        self.stock_entry.pack(pady=5)

        # Change Manufacturer to Point Level
        self.point_level_label = tk.Label(self.root, text="Point Level:", font=label_font, bg="#e0f7fa")
        self.point_level_label.pack(pady=5)
        self.point_level_entry = tk.Entry(self.root, font=entry_font, bd=2, relief="solid")
        self.point_level_entry.pack(pady=5)

        # Add Item Button
        self.add_button = tk.Button(self.root, text="Add Stationery", font=('Arial', 14), bg="#4CAF50", fg="white", bd=0, relief="solid", command=self.add_stationery)
        self.add_button.pack(pady=15)

        # Table to display the stationery inventory
        self.stationery_table = ttk.Treeview(self.root, columns=("ID", "Name", "Price", "Stock", "Point Level", "Date Added"), show="headings", height=6)
        self.stationery_table.heading("ID", text="ID")
        self.stationery_table.heading("Name", text="Stationery Item Name")
        self.stationery_table.heading("Price", text="Price ($)")
        self.stationery_table.heading("Stock", text="Stock Quantity")
        self.stationery_table.heading("Point Level", text="Point Level")
        self.stationery_table.heading("Date Added", text="Date Added")
        
        # Table Styling
        self.stationery_table.tag_configure('oddrow', background="#f2f2f2")  # Light gray background for odd rows
        self.stationery_table.tag_configure('evenrow', background="#ffffff")  # White background for even rows
        self.stationery_table.pack(pady=20)

        # Buttons for selling, updating, and deleting items
        self.sell_button = tk.Button(self.root, text="Sell Item", font=('Arial', 12), bg="#FF9800", fg="white", bd=0, relief="solid", command=self.sell_item)
        self.sell_button.pack(pady=5)

        self.update_button = tk.Button(self.root, text="Update Item", font=('Arial', 12), bg="#2196F3", fg="white", bd=0, relief="solid", command=self.update_item)
        self.update_button.pack(pady=5)

        self.delete_button = tk.Button(self.root, text="Delete Item", font=('Arial', 12), bg="#F44336", fg="white", bd=0, relief="solid", command=self.delete_item)
        self.delete_button.pack(pady=5)

        self.view_button = tk.Button(self.root, text="View Price & Total Amount", font=('Arial', 12), bg="#673AB7", fg="white", bd=0, relief="solid", command=self.view_price_and_total)
        self.view_button.pack(pady=5)

    def add_stationery(self):
        name = self.name_entry.get()
        try:
            price = float(self.price_entry.get())
            stock = int(self.stock_entry.get())
        except ValueError:
            messagebox.showerror("Input Error", "Please enter valid price and stock quantity.")
            return
        point_level = self.point_level_entry.get()
        date_added = datetime.today().strftime('%Y-%m-%d')
       
        if name and price > 0 and stock >= 0 and point_level:
            self.cursor.execute("""
                INSERT INTO stationery_inventory (name, price, stock, point_level, date_added)
                VALUES (%s, %s, %s, %s, %s)
            """, (name, price, stock, point_level, date_added))
            self.conn.commit()
            self.view_inventory()
            messagebox.showinfo("Success", "Stationery item added successfully!")
        else:
            messagebox.showerror("Input Error", "Please provide valid item details.")

    def view_inventory(self):
        for row in self.stationery_table.get_children():
            self.stationery_table.delete(row)
       
        self.cursor.execute("SELECT * FROM stationery_inventory")
        records = self.cursor.fetchall()
        for i, item in enumerate(records):
            if i % 2 == 0:
                self.stationery_table.insert("", tk.END, values=item, tags='evenrow')
            else:
                self.stationery_table.insert("", tk.END, values=item, tags='oddrow')

    def sell_item(self):
        selected_item = self.stationery_table.selection()
        if not selected_item:
            messagebox.showerror("Selection Error", "Please select an item to sell.")
            return
        item_id = self.stationery_table.item(selected_item[0])["values"][0]
        stock = self.stationery_table.item(selected_item[0])["values"][3]
        if stock > 0:
            new_stock = stock - 1
            self.cursor.execute("""
                UPDATE stationery_inventory
                SET stock = %s
                WHERE id = %s
            """, (new_stock, item_id))
            self.conn.commit()
            self.view_inventory()
            messagebox.showinfo("Success", "Item sold successfully!")
        else:
            messagebox.showerror("Stock Error", "This item is out of stock.")

    def update_item(self):
        selected_item = self.stationery_table.selection()
        if not selected_item:
            messagebox.showerror("Selection Error", "Please select an item to update.")
            return
        item_id = self.stationery_table.item(selected_item[0])["values"][0]
        
        # Populate the input fields with the selected item data
        name = self.stationery_table.item(selected_item[0])["values"][1]
        price = self.stationery_table.item(selected_item[0])["values"][2]
        stock = self.stationery_table.item(selected_item[0])["values"][3]
        point_level = self.stationery_table.item(selected_item[0])["values"][4]
        
        self.name_entry.delete(0, tk.END)
        self.name_entry.insert(0, name)
        
        self.price_entry.delete(0, tk.END)
        self.price_entry.insert(0, price)
        
        self.stock_entry.delete(0, tk.END)
        self.stock_entry.insert(0, stock)
        
        self.point_level_entry.delete(0, tk.END)
        self.point_level_entry.insert(0, point_level)
        
        # Change the button to update the selected item
        self.add_button.config(text="Update Stationery", command=lambda: self.confirm_update(item_id))

    def confirm_update(self, item_id):
        name = self.name_entry.get()
        try:
            price = float(self.price_entry.get())
            stock = int(self.stock_entry.get())
        except ValueError:
            messagebox.showerror("Input Error", "Please enter valid price and stock quantity.")
            return
        point_level = self.point_level_entry.get()

        if name and price > 0 and stock >= 0 and point_level:
            self.cursor.execute("""
                UPDATE stationery_inventory
                SET name = %s, price = %s, stock = %s, point_level = %s
                WHERE id = %s
            """, (name, price, stock, point_level, item_id))
            self.conn.commit()
            self.view_inventory()
            messagebox.showinfo("Success", "Item updated successfully!")
            
            # Reset the button back to "Add Stationery"
            self.add_button.config(text="Add Stationery", command=self.add_stationery)
        else:
            messagebox.showerror("Input Error", "Please provide valid item details.")

    def delete_item(self):
        selected_item = self.stationery_table.selection()
        if not selected_item:
            messagebox.showerror("Selection Error", "Please select an item to delete.")
            return
        item_id = self.stationery_table.item(selected_item[0])["values"][0]
        self.cursor.execute("DELETE FROM stationery_inventory WHERE id = %s", (item_id,))
        self.conn.commit()
        self.view_inventory()
        messagebox.showinfo("Success", "Item deleted successfully!")

    def view_price_and_total(self):
        selected_item = self.stationery_table.selection()
        if not selected_item:
            messagebox.showerror("Selection Error", "Please select an item to view price and total.")
            return
        item_name = self.stationery_table.item(selected_item[0])["values"][1]
        
        try:
            item_price = float(self.stationery_table.item(selected_item[0])["values"][2])
            stock_quantity = int(self.stationery_table.item(selected_item[0])["values"][3])
        except ValueError:
            messagebox.showerror("Data Error", "The price or stock quantity data is not valid.")
            return

        total_amount = item_price * stock_quantity
        
        messagebox.showinfo("Price & Total", f"Item: {item_name}\nPrice: ${item_price:.2f}\nStock: {stock_quantity}\nTotal Amount: ${total_amount:.2f}")

    def close_connection(self):
        self.conn.close()

if __name__ == "__main__":
    root = tk.Tk()
    app = StationeryShopApp(root)
    root.mainloop()

